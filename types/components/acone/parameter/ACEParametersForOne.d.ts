import ACEParameters from '../../common/parameter/ACEParameters';
import ACEntityForST from './ACEntityForST';
import ACEntityForVT from './ACEntityForVT';
import { ResultAfterSaveInStorage } from './ResultAfterSaveInStorage';
import { ResultOfStorage } from '../../common/constant/ResultOfStorage';
export default class ACEParametersForOne extends ACEParameters {
    private static _TAG;
    private static instance;
    private adeld;
    private adid;
    private ag;
    private push;
    private amt;
    private ce;
    private ct;
    private dm;
    private gd;
    private _id;
    private jn;
    private kw;
    private lg;
    private ll;
    private md;
    private memberKey;
    private mid;
    private mr;
    private onum;
    private payMethod;
    private pd;
    private productId;
    private re;
    private ref;
    private ri;
    private skey;
    private src;
    private st;
    private sts;
    private sv;
    private tp;
    private udf1;
    private udf2;
    private udf3;
    private url;
    private userId;
    private vk;
    private vt;
    static getInstance(): ACEParametersForOne;
    private constructor();
    getADELD(): string;
    setADELD(value: boolean): void;
    getADID(): string;
    setADID(value: string): void;
    getAG(): number;
    setAG(value: number): void;
    getAMT(): string;
    setAMT(value: string): void;
    getCE(): string;
    setCE(value: string): void;
    getCT(): string;
    setCT(value: string): void;
    getDM(): string;
    setDM(value: string): void;
    getGD(): string;
    setGD(value: string): void;
    getID(): string;
    setID(value: string): void;
    getInstallReferrer(callback: (error?: Error, result?: ResultOfStorage) => void): void;
    getInstallReferrer(): Promise<ResultOfStorage>;
    setInstallReferrer(value: string, callback: (error?: Error, result?: ResultOfStorage) => void): void;
    setInstallReferrer(value: string): Promise<ResultOfStorage>;
    getJN(): string;
    setJN(value: string): void;
    getKW(): string;
    setKW(value: string): void;
    getLG(): string;
    setLG(value: string): void;
    getLL(): string;
    setLL(value: string): void;
    getMD(): string;
    setMD(value: string): void;
    getMemberKey(): string;
    setMemberKey(value: string): void;
    getMID(): string;
    setMID(value: string): void;
    getMR(): string;
    setMR(value: string): void;
    getONUM(): string;
    setONUM(value: string): void;
    getPayMethod(): string;
    setPayMethod(value: string): void;
    getPD(): string;
    setPD(value: string): void;
    getProductId(): string;
    setProductId(value: string): void;
    getPush(): string;
    setPush(value: string): void;
    getRE(): number;
    setRE(value: number): void;
    clearREF(): void;
    getREF(): string;
    setREF(value: string): void;
    getRI(): string;
    setRI(value: string): void;
    getSKEY(): string;
    setSKEY(value: string): void;
    getSRC(): string;
    setSRC(value: string): void;
    getST(): ACEntityForST;
    setST(value: ACEntityForST): void;
    loadST(callback: ((error?: Error, result?: object) => void) | undefined): void;
    loadST(): Promise<object>;
    saveST_toInStorage(st: ACEntityForST, callback: ((error?: Error, result?: ResultAfterSaveInStorage) => void) | undefined): void;
    saveST_toInStorage(st: ACEntityForST): Promise<ResultAfterSaveInStorage>;
    getSTS(): string;
    setSTS(value: string): void;
    getSV(): string;
    setSV(value: string): void;
    getTP(): string;
    setTP(value: string): void;
    getTZ(): string;
    getUDF1(): number;
    setUDF1(value: number): void;
    getUDF2(): number;
    setUDF2(value: number): void;
    getUDF3(): number;
    setUDF3(value: number): void;
    getURL(): string;
    setURL(value: string): void;
    getUserID(): string;
    setUserID(value: string): void;
    getVK(): number;
    setVK(value: number): void;
    getVT(): ACEntityForVT;
    setVT(value: ACEntityForVT): void;
    setJSONtoVT(value: JSON): void;
    setPcStampWhenNotStored(): void;
    loadVT(callback: ((error?: Error, result?: object) => void) | undefined): void;
    loadVT(): Promise<object>;
    saveVT_toInStorage(vt: ACEntityForVT, callback: ((error?: Error, result?: ResultAfterSaveInStorage) => void) | undefined): void;
    saveVT_toInStorage(vt: ACEntityForVT): Promise<ResultAfterSaveInStorage>;
    protected getParamsToObject(): ParamsForNetwork;
    getParamsToObjectForLogSend(): ParamsForNetwork;
}
declare type ParamsForNetwork = {
    adeld: string;
    adid: string;
    ag: number;
    push?: string;
    amt: string;
    ce: string;
    ct: string;
    dm: string;
    gd: string;
    id: string;
    jid: string;
    jn: string;
    kw: string;
    lg: string;
    ll: string;
    md: string;
    member_key: string;
    mid: string;
    mr: string;
    onum: string;
    pay: string;
    pd: string;
    pdid: string;
    re: number;
    ref: string;
    ri: string;
    skey: string;
    src: string;
    st: string;
    sts: string;
    sv: string;
    tp: string;
    tz: string;
    udf1: number;
    udf2: number;
    udf3: number;
    url: string;
    vk: number;
    vt: string;
};
export {};
